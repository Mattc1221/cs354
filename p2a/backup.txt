////////////////////////////////////////////////////////////////////////////////
// Main File:        (name of file with main function)
// This File:        (name of this file)
// Other Files:      (name of all other files if any)
// Semester:         CS 354 Fall 2019
//
// Author:           (your name)
// Email:            (your wisc email address)
// CS Login:         (your CS login name)
//
/////////////////////////// OTHER SOURCES OF HELP //////////////////////////////
//                   fully acknowledge and credit all sources of help,
//                   other than Instructors and TAs.
//
// Persons:          Identify persons by name, relationship to you, and email.
//                   Describe in detail the the ideas and help they provided.
//
// Online sources:   avoid web searches to solve your problems, but if you do
//                   search, be sure to include Web URLs and description of
//                   of any information you find.
////////////////////////////////////////////////////////////////////////////////

#include <stdio.h>  
#include <stdlib.h>
#include <string.h>     

char *COMMA = ",";  

/* COMPLETED:       
 * Retrieves from the first line of the input file,
 * the size of the board (number of rows and columns).
 * 
 * fp: file pointer for input file
 * size: pointer to size
 */
void get_dimensions(FILE *fp, int *size) {      
    char *line = NULL;
    size_t len = 0;
    if (getline(&line, &len, fp) == -1) {
        printf("Error in reading the file\n");
        exit(1);
    }

    char *token = NULL;
    token = strtok(line, COMMA);
    *size = atoi(token);
}   


/* TODO:
 * Returns 1 if and only if the board is in a valid state.
 * Otherwise returns 0.
 * 
 * board: heap allocated 2D board
 * size: number of rows and columns
 */
int n_in_a_row(int **board, int size) {
    int num_x = 0; // total number of Xs in the board
    int num_o = 0; // total number of Os in the board
    int win_x = 0; // number of wins for the X team
    int win_o = 0; // number of wins for the O team
    int rcsum = 0; // sums up the rows and columns to check for a winning case    
    int diagonal1 = 0; // sums up the diagonals to check for a winning case
    int diagonal2 = 0;
/*    
    for(int i=0; i < size; i++) {
        for(int j=0; j < size;j++) {
    	    int curr_val = *(*(board+i) + j);
            if( curr_val == 1){
	    	num_x++;
	    }
	    if( curr_val == 2){
                num_o++;
            }
        }
    }

    // compares the number of Xs to the number of Os
    if(num_x-num_o > 1 || num_x-num_o < 0){ 
	return 0;
    }


    // checks for wins in the columns
    for (int i = 0; i< size; i++){
	rcsum = 0;
    	for(int j=0;j<size;j++) {
	    if (*(*(board+i) +j) == 2){
	        rcsum += -1;
	    }else{
	        rcsum += *(*(board+i) +j);
	    }
        }
	if( rcsum == 3){
            win_x++;
        }
        if( rcsum == -3){
            win_o++;
        }
    }

    // checks for wins in the rows
    for (int i = 0; i< size; i++){
        rcsum = 0;
        for(int j=0;j<size;j++) {
            if (*(*(board+j) +i) == 2){
                rcsum += -1;
            }else{
                rcsum += *(*(board + j) +i);
            }
        }
        if( rcsum == 3){
            win_x++;
        }
        if( rcsum == -3){
            win_o++;
        }
    }

    // Checks for wins along the diagonals
    for(int i = 0; i < size; i++){
    	if (*(*(board+i) +i) == 2){
            diagonal1 += -1;
        }else{
            diagonal1 += *(*(board+i) +i);
        }
	if (*(*(board+(size-1-i)) +i) == 2){
            diagonal2 += -1;
        }else{
            diagonal2 += *(*(board+(size-1-i)) +i);
        }
    }
    if(diagonal1 == 3) win_x++;
    if(diagonal1 == 3) win_x++;
    if(diagonal2 == -3) win_o++;
    if(diagonal2 == -3) win_o++;

    // Checks for a valid amount of wins
    if(win_x > 1 || win_o > 1) return 0;
    if(win_x > 0 && win_o > 0) return 0;
  */
    return 1;   
}     


/* PARTIALLY COMPLETED:
 * This program prints Valid if the input file contains
 * a game board with either 1 or no winners; and where
 * there is at most 1 more X than O.
 * 
 * argc: CLA count
 * argv: CLA value
 */
int main(int argc, char *argv[]) {              

    //Check if number of command-line arguments is correct.
    if(argc != 2){
	printf("ERROR: FORMAT SHOULD BE: ./n_in_a_row.c <filename.txt>");
	exit(1);
    }

    //Open the file and check if it opened successfully.
    FILE *fp = fopen(*(argv + 1), "r");
    if (fp == NULL) {
        printf("Cannot open file for reading\n");
        exit(1);
    }


    //Declare local variables.
    int size;
    int **m;
    int valid;

    //Call get_dimensions to retrieve the board size.
    get_dimensions(fp, &size);
    printf("the size is: %d\n", size);

    //Dynamically allocate a 2D array of dimensions retrieved above.
    m = malloc(sizeof(int)*size);
    for(int i=0; i < size; i++) {
        *(m + i) = malloc(sizeof(int) * size);
    }

    printf("this\n");

    //Read the file line by line.
    //Tokenize each line wrt comma to store the values in your 2D array.
    char *line = NULL;
    size_t len = 0;
    char *token = NULL;
    for (int i = 0; i < size; i++) {

        if (getline(&line, &len, fp) == -1) {
            printf("Error while reading the file\n");
            exit(1);
        }

        token = strtok(line, COMMA);
        for (int j = 0; j < size; j++) {
            //Complete the line of code below
            //to initialize your 2D array.
            *(*(m+i) +j) = atoi(token);
            token = strtok(NULL, COMMA);
        }
    }

    //Call the function n_in_a_row and print the appropriate
    //output depending on the function's return value.
    valid = n_in_a_row(m, size);
    if(valid == 1) printf("valid\n");
    else if(valid == 2) printf("invalid\n");

    //TODO: Free all dynamically allocated memory.


    //Close the file.
    if (fclose(fp) != 0) {
        printf("Error while closing the file\n");
        exit(1);
    } 

    return 0;       
}       

