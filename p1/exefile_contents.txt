
decode:     file format elf32-i386


Disassembly of section .init:

00000498 <_init>:
 498:	53                   	push   %ebx
 499:	83 ec 08             	sub    $0x8,%esp
 49c:	e8 ff 00 00 00       	call   5a0 <__x86.get_pc_thunk.bx>
 4a1:	81 c3 17 1b 00 00    	add    $0x1b17,%ebx
 4a7:	8b 83 38 00 00 00    	mov    0x38(%ebx),%eax
 4ad:	85 c0                	test   %eax,%eax
 4af:	74 05                	je     4b6 <_init+0x1e>
 4b1:	e8 a2 00 00 00       	call   558 <__gmon_start__@plt>
 4b6:	83 c4 08             	add    $0x8,%esp
 4b9:	5b                   	pop    %ebx
 4ba:	c3                   	ret    

Disassembly of section .plt:

000004c0 <.plt>:
 4c0:	ff b3 04 00 00 00    	pushl  0x4(%ebx)
 4c6:	ff a3 08 00 00 00    	jmp    *0x8(%ebx)
 4cc:	00 00                	add    %al,(%eax)
	...

000004d0 <printf@plt>:
 4d0:	ff a3 0c 00 00 00    	jmp    *0xc(%ebx)
 4d6:	68 00 00 00 00       	push   $0x0
 4db:	e9 e0 ff ff ff       	jmp    4c0 <.plt>

000004e0 <fgets@plt>:
 4e0:	ff a3 10 00 00 00    	jmp    *0x10(%ebx)
 4e6:	68 08 00 00 00       	push   $0x8
 4eb:	e9 d0 ff ff ff       	jmp    4c0 <.plt>

000004f0 <fwrite@plt>:
 4f0:	ff a3 14 00 00 00    	jmp    *0x14(%ebx)
 4f6:	68 10 00 00 00       	push   $0x10
 4fb:	e9 c0 ff ff ff       	jmp    4c0 <.plt>

00000500 <malloc@plt>:
 500:	ff a3 18 00 00 00    	jmp    *0x18(%ebx)
 506:	68 18 00 00 00       	push   $0x18
 50b:	e9 b0 ff ff ff       	jmp    4c0 <.plt>

00000510 <exit@plt>:
 510:	ff a3 1c 00 00 00    	jmp    *0x1c(%ebx)
 516:	68 20 00 00 00       	push   $0x20
 51b:	e9 a0 ff ff ff       	jmp    4c0 <.plt>

00000520 <strlen@plt>:
 520:	ff a3 20 00 00 00    	jmp    *0x20(%ebx)
 526:	68 28 00 00 00       	push   $0x28
 52b:	e9 90 ff ff ff       	jmp    4c0 <.plt>

00000530 <__libc_start_main@plt>:
 530:	ff a3 24 00 00 00    	jmp    *0x24(%ebx)
 536:	68 30 00 00 00       	push   $0x30
 53b:	e9 80 ff ff ff       	jmp    4c0 <.plt>

00000540 <fopen@plt>:
 540:	ff a3 28 00 00 00    	jmp    *0x28(%ebx)
 546:	68 38 00 00 00       	push   $0x38
 54b:	e9 70 ff ff ff       	jmp    4c0 <.plt>

Disassembly of section .plt.got:

00000550 <__cxa_finalize@plt>:
 550:	ff a3 34 00 00 00    	jmp    *0x34(%ebx)
 556:	66 90                	xchg   %ax,%ax

00000558 <__gmon_start__@plt>:
 558:	ff a3 38 00 00 00    	jmp    *0x38(%ebx)
 55e:	66 90                	xchg   %ax,%ax

Disassembly of section .text:

00000560 <_start>:
 560:	31 ed                	xor    %ebp,%ebp
 562:	5e                   	pop    %esi
 563:	89 e1                	mov    %esp,%ecx
 565:	83 e4 f0             	and    $0xfffffff0,%esp
 568:	50                   	push   %eax
 569:	54                   	push   %esp
 56a:	52                   	push   %edx
 56b:	e8 22 00 00 00       	call   592 <_start+0x32>
 570:	81 c3 48 1a 00 00    	add    $0x1a48,%ebx
 576:	8d 83 78 ea ff ff    	lea    -0x1588(%ebx),%eax
 57c:	50                   	push   %eax
 57d:	8d 83 18 ea ff ff    	lea    -0x15e8(%ebx),%eax
 583:	50                   	push   %eax
 584:	51                   	push   %ecx
 585:	56                   	push   %esi
 586:	ff b3 40 00 00 00    	pushl  0x40(%ebx)
 58c:	e8 9f ff ff ff       	call   530 <__libc_start_main@plt>
 591:	f4                   	hlt    
 592:	8b 1c 24             	mov    (%esp),%ebx
 595:	c3                   	ret    
 596:	66 90                	xchg   %ax,%ax
 598:	66 90                	xchg   %ax,%ax
 59a:	66 90                	xchg   %ax,%ax
 59c:	66 90                	xchg   %ax,%ax
 59e:	66 90                	xchg   %ax,%ax

000005a0 <__x86.get_pc_thunk.bx>:
 5a0:	8b 1c 24             	mov    (%esp),%ebx
 5a3:	c3                   	ret    
 5a4:	66 90                	xchg   %ax,%ax
 5a6:	66 90                	xchg   %ax,%ax
 5a8:	66 90                	xchg   %ax,%ax
 5aa:	66 90                	xchg   %ax,%ax
 5ac:	66 90                	xchg   %ax,%ax
 5ae:	66 90                	xchg   %ax,%ax

000005b0 <deregister_tm_clones>:
 5b0:	e8 e4 00 00 00       	call   699 <__x86.get_pc_thunk.dx>
 5b5:	81 c2 03 1a 00 00    	add    $0x1a03,%edx
 5bb:	8d 8a 50 00 00 00    	lea    0x50(%edx),%ecx
 5c1:	8d 82 50 00 00 00    	lea    0x50(%edx),%eax
 5c7:	39 c8                	cmp    %ecx,%eax
 5c9:	74 1d                	je     5e8 <deregister_tm_clones+0x38>
 5cb:	8b 82 2c 00 00 00    	mov    0x2c(%edx),%eax
 5d1:	85 c0                	test   %eax,%eax
 5d3:	74 13                	je     5e8 <deregister_tm_clones+0x38>
 5d5:	55                   	push   %ebp
 5d6:	89 e5                	mov    %esp,%ebp
 5d8:	83 ec 14             	sub    $0x14,%esp
 5db:	51                   	push   %ecx
 5dc:	ff d0                	call   *%eax
 5de:	83 c4 10             	add    $0x10,%esp
 5e1:	c9                   	leave  
 5e2:	c3                   	ret    
 5e3:	90                   	nop
 5e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 5e8:	f3 c3                	repz ret 
 5ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

000005f0 <register_tm_clones>:
 5f0:	e8 a4 00 00 00       	call   699 <__x86.get_pc_thunk.dx>
 5f5:	81 c2 c3 19 00 00    	add    $0x19c3,%edx
 5fb:	55                   	push   %ebp
 5fc:	8d 8a 50 00 00 00    	lea    0x50(%edx),%ecx
 602:	8d 82 50 00 00 00    	lea    0x50(%edx),%eax
 608:	29 c8                	sub    %ecx,%eax
 60a:	89 e5                	mov    %esp,%ebp
 60c:	53                   	push   %ebx
 60d:	c1 f8 02             	sar    $0x2,%eax
 610:	89 c3                	mov    %eax,%ebx
 612:	83 ec 04             	sub    $0x4,%esp
 615:	c1 eb 1f             	shr    $0x1f,%ebx
 618:	01 d8                	add    %ebx,%eax
 61a:	d1 f8                	sar    %eax
 61c:	74 14                	je     632 <register_tm_clones+0x42>
 61e:	8b 92 44 00 00 00    	mov    0x44(%edx),%edx
 624:	85 d2                	test   %edx,%edx
 626:	74 0a                	je     632 <register_tm_clones+0x42>
 628:	83 ec 08             	sub    $0x8,%esp
 62b:	50                   	push   %eax
 62c:	51                   	push   %ecx
 62d:	ff d2                	call   *%edx
 62f:	83 c4 10             	add    $0x10,%esp
 632:	8b 5d fc             	mov    -0x4(%ebp),%ebx
 635:	c9                   	leave  
 636:	c3                   	ret    
 637:	89 f6                	mov    %esi,%esi
 639:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

00000640 <__do_global_dtors_aux>:
 640:	55                   	push   %ebp
 641:	89 e5                	mov    %esp,%ebp
 643:	53                   	push   %ebx
 644:	e8 57 ff ff ff       	call   5a0 <__x86.get_pc_thunk.bx>
 649:	81 c3 6f 19 00 00    	add    $0x196f,%ebx
 64f:	83 ec 04             	sub    $0x4,%esp
 652:	80 bb 50 00 00 00 00 	cmpb   $0x0,0x50(%ebx)
 659:	75 27                	jne    682 <__do_global_dtors_aux+0x42>
 65b:	8b 83 34 00 00 00    	mov    0x34(%ebx),%eax
 661:	85 c0                	test   %eax,%eax
 663:	74 11                	je     676 <__do_global_dtors_aux+0x36>
 665:	83 ec 0c             	sub    $0xc,%esp
 668:	ff b3 4c 00 00 00    	pushl  0x4c(%ebx)
 66e:	e8 dd fe ff ff       	call   550 <__cxa_finalize@plt>
 673:	83 c4 10             	add    $0x10,%esp
 676:	e8 35 ff ff ff       	call   5b0 <deregister_tm_clones>
 67b:	c6 83 50 00 00 00 01 	movb   $0x1,0x50(%ebx)
 682:	8b 5d fc             	mov    -0x4(%ebp),%ebx
 685:	c9                   	leave  
 686:	c3                   	ret    
 687:	89 f6                	mov    %esi,%esi
 689:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

00000690 <frame_dummy>:
 690:	55                   	push   %ebp
 691:	89 e5                	mov    %esp,%ebp
 693:	5d                   	pop    %ebp
 694:	e9 57 ff ff ff       	jmp    5f0 <register_tm_clones>

00000699 <__x86.get_pc_thunk.dx>:
 699:	8b 14 24             	mov    (%esp),%edx
 69c:	c3                   	ret    

0000069d <main>:
 69d:	8d 4c 24 04          	lea    0x4(%esp),%ecx
 6a1:	83 e4 f0             	and    $0xfffffff0,%esp
 6a4:	ff 71 fc             	pushl  -0x4(%ecx)
 6a7:	55                   	push   %ebp
 6a8:	89 e5                	mov    %esp,%ebp
 6aa:	53                   	push   %ebx
 6ab:	51                   	push   %ecx
 6ac:	83 ec 10             	sub    $0x10,%esp
 6af:	e8 ec fe ff ff       	call   5a0 <__x86.get_pc_thunk.bx>
 6b4:	81 c3 04 19 00 00    	add    $0x1904,%ebx
 6ba:	e8 58 00 00 00       	call   717 <read_cipher_file>
 6bf:	89 45 ec             	mov    %eax,-0x14(%ebp)
 6c2:	83 ec 08             	sub    $0x8,%esp
 6c5:	ff 75 ec             	pushl  -0x14(%ebp)
 6c8:	8d 83 98 ea ff ff    	lea    -0x1568(%ebx),%eax
 6ce:	50                   	push   %eax
 6cf:	e8 fc fd ff ff       	call   4d0 <printf@plt>
 6d4:	83 c4 10             	add    $0x10,%esp
 6d7:	e8 21 01 00 00       	call   7fd <get_login_key>
 6dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
 6df:	83 ec 08             	sub    $0x8,%esp
 6e2:	ff 75 f0             	pushl  -0x10(%ebp)
 6e5:	ff 75 ec             	pushl  -0x14(%ebp)
 6e8:	e8 c0 01 00 00       	call   8ad <decode>
 6ed:	83 c4 10             	add    $0x10,%esp
 6f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
 6f3:	83 ec 08             	sub    $0x8,%esp
 6f6:	ff 75 f4             	pushl  -0xc(%ebp)
 6f9:	8d 83 a8 ea ff ff    	lea    -0x1558(%ebx),%eax
 6ff:	50                   	push   %eax
 700:	e8 cb fd ff ff       	call   4d0 <printf@plt>
 705:	83 c4 10             	add    $0x10,%esp
 708:	b8 00 00 00 00       	mov    $0x0,%eax
 70d:	8d 65 f8             	lea    -0x8(%ebp),%esp
 710:	59                   	pop    %ecx
 711:	5b                   	pop    %ebx
 712:	5d                   	pop    %ebp
 713:	8d 61 fc             	lea    -0x4(%ecx),%esp
 716:	c3                   	ret    

00000717 <read_cipher_file>:
 717:	55                   	push   %ebp
 718:	89 e5                	mov    %esp,%ebp
 71a:	53                   	push   %ebx
 71b:	83 ec 14             	sub    $0x14,%esp
 71e:	e8 7d fe ff ff       	call   5a0 <__x86.get_pc_thunk.bx>
 723:	81 c3 95 18 00 00    	add    $0x1895,%ebx
 729:	83 ec 08             	sub    $0x8,%esp
 72c:	8d 83 b7 ea ff ff    	lea    -0x1549(%ebx),%eax
 732:	50                   	push   %eax
 733:	8d 83 b9 ea ff ff    	lea    -0x1547(%ebx),%eax
 739:	50                   	push   %eax
 73a:	e8 01 fe ff ff       	call   540 <fopen@plt>
 73f:	83 c4 10             	add    $0x10,%esp
 742:	89 45 ec             	mov    %eax,-0x14(%ebp)
 745:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
 749:	75 26                	jne    771 <read_cipher_file+0x5a>
 74b:	8b 83 30 00 00 00    	mov    0x30(%ebx),%eax
 751:	8b 00                	mov    (%eax),%eax
 753:	50                   	push   %eax
 754:	6a 1e                	push   $0x1e
 756:	6a 01                	push   $0x1
 758:	8d 83 c8 ea ff ff    	lea    -0x1538(%ebx),%eax
 75e:	50                   	push   %eax
 75f:	e8 8c fd ff ff       	call   4f0 <fwrite@plt>
 764:	83 c4 10             	add    $0x10,%esp
 767:	83 ec 0c             	sub    $0xc,%esp
 76a:	6a 01                	push   $0x1
 76c:	e8 9f fd ff ff       	call   510 <exit@plt>
 771:	83 ec 0c             	sub    $0xc,%esp
 774:	68 e8 03 00 00       	push   $0x3e8
 779:	e8 82 fd ff ff       	call   500 <malloc@plt>
 77e:	83 c4 10             	add    $0x10,%esp
 781:	89 45 f0             	mov    %eax,-0x10(%ebp)
 784:	83 ec 04             	sub    $0x4,%esp
 787:	ff 75 ec             	pushl  -0x14(%ebp)
 78a:	68 e8 03 00 00       	push   $0x3e8
 78f:	ff 75 f0             	pushl  -0x10(%ebp)
 792:	e8 49 fd ff ff       	call   4e0 <fgets@plt>
 797:	83 c4 10             	add    $0x10,%esp
 79a:	85 c0                	test   %eax,%eax
 79c:	75 26                	jne    7c4 <read_cipher_file+0xad>
 79e:	8b 83 30 00 00 00    	mov    0x30(%ebx),%eax
 7a4:	8b 00                	mov    (%eax),%eax
 7a6:	50                   	push   %eax
 7a7:	6a 1f                	push   $0x1f
 7a9:	6a 01                	push   $0x1
 7ab:	8d 83 e8 ea ff ff    	lea    -0x1518(%ebx),%eax
 7b1:	50                   	push   %eax
 7b2:	e8 39 fd ff ff       	call   4f0 <fwrite@plt>
 7b7:	83 c4 10             	add    $0x10,%esp
 7ba:	83 ec 0c             	sub    $0xc,%esp
 7bd:	6a 01                	push   $0x1
 7bf:	e8 4c fd ff ff       	call   510 <exit@plt>
 7c4:	83 ec 0c             	sub    $0xc,%esp
 7c7:	ff 75 f0             	pushl  -0x10(%ebp)
 7ca:	e8 51 fd ff ff       	call   520 <strlen@plt>
 7cf:	83 c4 10             	add    $0x10,%esp
 7d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
 7d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
 7d8:	8d 50 ff             	lea    -0x1(%eax),%edx
 7db:	8b 45 f0             	mov    -0x10(%ebp),%eax
 7de:	01 d0                	add    %edx,%eax
 7e0:	0f b6 00             	movzbl (%eax),%eax
 7e3:	3c 0a                	cmp    $0xa,%al
 7e5:	75 0e                	jne    7f5 <read_cipher_file+0xde>
 7e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
 7ea:	8d 50 ff             	lea    -0x1(%eax),%edx
 7ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
 7f0:	01 d0                	add    %edx,%eax
 7f2:	c6 00 00             	movb   $0x0,(%eax)
 7f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
 7f8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
 7fb:	c9                   	leave  
 7fc:	c3                   	ret    

000007fd <get_login_key>:
 7fd:	55                   	push   %ebp
 7fe:	89 e5                	mov    %esp,%ebp
 800:	53                   	push   %ebx
 801:	83 ec 14             	sub    $0x14,%esp
 804:	e8 97 fd ff ff       	call   5a0 <__x86.get_pc_thunk.bx>
 809:	81 c3 af 17 00 00    	add    $0x17af,%ebx
 80f:	83 ec 0c             	sub    $0xc,%esp
 812:	6a 32                	push   $0x32
 814:	e8 e7 fc ff ff       	call   500 <malloc@plt>
 819:	83 c4 10             	add    $0x10,%esp
 81c:	89 45 f0             	mov    %eax,-0x10(%ebp)
 81f:	83 ec 0c             	sub    $0xc,%esp
 822:	8d 83 08 eb ff ff    	lea    -0x14f8(%ebx),%eax
 828:	50                   	push   %eax
 829:	e8 a2 fc ff ff       	call   4d0 <printf@plt>
 82e:	83 c4 10             	add    $0x10,%esp
 831:	8b 83 3c 00 00 00    	mov    0x3c(%ebx),%eax
 837:	8b 00                	mov    (%eax),%eax
 839:	83 ec 04             	sub    $0x4,%esp
 83c:	50                   	push   %eax
 83d:	6a 32                	push   $0x32
 83f:	ff 75 f0             	pushl  -0x10(%ebp)
 842:	e8 99 fc ff ff       	call   4e0 <fgets@plt>
 847:	83 c4 10             	add    $0x10,%esp
 84a:	85 c0                	test   %eax,%eax
 84c:	75 26                	jne    874 <get_login_key+0x77>
 84e:	8b 83 30 00 00 00    	mov    0x30(%ebx),%eax
 854:	8b 00                	mov    (%eax),%eax
 856:	50                   	push   %eax
 857:	6a 1a                	push   $0x1a
 859:	6a 01                	push   $0x1
 85b:	8d 83 1e eb ff ff    	lea    -0x14e2(%ebx),%eax
 861:	50                   	push   %eax
 862:	e8 89 fc ff ff       	call   4f0 <fwrite@plt>
 867:	83 c4 10             	add    $0x10,%esp
 86a:	83 ec 0c             	sub    $0xc,%esp
 86d:	6a 01                	push   $0x1
 86f:	e8 9c fc ff ff       	call   510 <exit@plt>
 874:	83 ec 0c             	sub    $0xc,%esp
 877:	ff 75 f0             	pushl  -0x10(%ebp)
 87a:	e8 a1 fc ff ff       	call   520 <strlen@plt>
 87f:	83 c4 10             	add    $0x10,%esp
 882:	89 45 f4             	mov    %eax,-0xc(%ebp)
 885:	8b 45 f4             	mov    -0xc(%ebp),%eax
 888:	8d 50 ff             	lea    -0x1(%eax),%edx
 88b:	8b 45 f0             	mov    -0x10(%ebp),%eax
 88e:	01 d0                	add    %edx,%eax
 890:	0f b6 00             	movzbl (%eax),%eax
 893:	3c 0a                	cmp    $0xa,%al
 895:	75 0e                	jne    8a5 <get_login_key+0xa8>
 897:	8b 45 f4             	mov    -0xc(%ebp),%eax
 89a:	8d 50 ff             	lea    -0x1(%eax),%edx
 89d:	8b 45 f0             	mov    -0x10(%ebp),%eax
 8a0:	01 d0                	add    %edx,%eax
 8a2:	c6 00 00             	movb   $0x0,(%eax)
 8a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
 8a8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
 8ab:	c9                   	leave  
 8ac:	c3                   	ret    

000008ad <decode>:
 8ad:	55                   	push   %ebp
 8ae:	89 e5                	mov    %esp,%ebp
 8b0:	83 ec 18             	sub    $0x18,%esp
 8b3:	e8 05 01 00 00       	call   9bd <__x86.get_pc_thunk.ax>
 8b8:	05 00 17 00 00       	add    $0x1700,%eax
 8bd:	83 ec 0c             	sub    $0xc,%esp
 8c0:	ff 75 0c             	pushl  0xc(%ebp)
 8c3:	e8 82 00 00 00       	call   94a <calculate_shifts>
 8c8:	83 c4 10             	add    $0x10,%esp
 8cb:	89 45 ec             	mov    %eax,-0x14(%ebp)
 8ce:	8b 45 08             	mov    0x8(%ebp),%eax
 8d1:	89 45 e8             	mov    %eax,-0x18(%ebp)
 8d4:	eb 65                	jmp    93b <decode+0x8e>
 8d6:	8b 45 e8             	mov    -0x18(%ebp),%eax
 8d9:	0f b6 00             	movzbl (%eax),%eax
 8dc:	3c 60                	cmp    $0x60,%al
 8de:	7e 56                	jle    936 <decode+0x89>
 8e0:	8b 45 e8             	mov    -0x18(%ebp),%eax
 8e3:	0f b6 00             	movzbl (%eax),%eax
 8e6:	3c 7a                	cmp    $0x7a,%al
 8e8:	7f 4c                	jg     936 <decode+0x89>
 8ea:	8b 45 e8             	mov    -0x18(%ebp),%eax
 8ed:	0f b6 00             	movzbl (%eax),%eax
 8f0:	0f be c0             	movsbl %al,%eax
 8f3:	83 e8 61             	sub    $0x61,%eax
 8f6:	89 45 f0             	mov    %eax,-0x10(%ebp)
 8f9:	8b 55 f0             	mov    -0x10(%ebp),%edx
 8fc:	8b 45 ec             	mov    -0x14(%ebp),%eax
 8ff:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
 902:	ba 4f ec c4 4e       	mov    $0x4ec4ec4f,%edx
 907:	89 c8                	mov    %ecx,%eax
 909:	f7 ea                	imul   %edx
 90b:	c1 fa 03             	sar    $0x3,%edx
 90e:	89 c8                	mov    %ecx,%eax
 910:	c1 f8 1f             	sar    $0x1f,%eax
 913:	29 c2                	sub    %eax,%edx
 915:	89 d0                	mov    %edx,%eax
 917:	89 45 f4             	mov    %eax,-0xc(%ebp)
 91a:	8b 45 f4             	mov    -0xc(%ebp),%eax
 91d:	6b c0 1a             	imul   $0x1a,%eax,%eax
 920:	29 c1                	sub    %eax,%ecx
 922:	89 c8                	mov    %ecx,%eax
 924:	89 45 f4             	mov    %eax,-0xc(%ebp)
 927:	8b 45 f4             	mov    -0xc(%ebp),%eax
 92a:	83 c0 61             	add    $0x61,%eax
 92d:	89 c2                	mov    %eax,%edx
 92f:	8b 45 e8             	mov    -0x18(%ebp),%eax
 932:	88 10                	mov    %dl,(%eax)
 934:	eb 01                	jmp    937 <decode+0x8a>
 936:	90                   	nop
 937:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
 93b:	8b 45 e8             	mov    -0x18(%ebp),%eax
 93e:	0f b6 00             	movzbl (%eax),%eax
 941:	84 c0                	test   %al,%al
 943:	75 91                	jne    8d6 <decode+0x29>
 945:	8b 45 08             	mov    0x8(%ebp),%eax
 948:	c9                   	leave  
 949:	c3                   	ret    

0000094a <calculate_shifts>:
 94a:	55                   	push   %ebp
 94b:	89 e5                	mov    %esp,%ebp
 94d:	83 ec 10             	sub    $0x10,%esp
 950:	e8 68 00 00 00       	call   9bd <__x86.get_pc_thunk.ax>
 955:	05 63 16 00 00       	add    $0x1663,%eax
 95a:	8b 45 08             	mov    0x8(%ebp),%eax
 95d:	89 45 f8             	mov    %eax,-0x8(%ebp)
 960:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
 967:	eb 10                	jmp    979 <calculate_shifts+0x2f>
 969:	8b 45 f8             	mov    -0x8(%ebp),%eax
 96c:	0f b6 00             	movzbl (%eax),%eax
 96f:	0f be c0             	movsbl %al,%eax
 972:	31 45 fc             	xor    %eax,-0x4(%ebp)
 975:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
 979:	8b 45 f8             	mov    -0x8(%ebp),%eax
 97c:	0f b6 00             	movzbl (%eax),%eax
 97f:	84 c0                	test   %al,%al
 981:	75 e6                	jne    969 <calculate_shifts+0x1f>
 983:	8b 4d fc             	mov    -0x4(%ebp),%ecx
 986:	ba 4f ec c4 4e       	mov    $0x4ec4ec4f,%edx
 98b:	89 c8                	mov    %ecx,%eax
 98d:	f7 ea                	imul   %edx
 98f:	c1 fa 03             	sar    $0x3,%edx
 992:	89 c8                	mov    %ecx,%eax
 994:	c1 f8 1f             	sar    $0x1f,%eax
 997:	29 c2                	sub    %eax,%edx
 999:	89 d0                	mov    %edx,%eax
 99b:	6b c0 1a             	imul   $0x1a,%eax,%eax
 99e:	29 c1                	sub    %eax,%ecx
 9a0:	89 c8                	mov    %ecx,%eax
 9a2:	99                   	cltd   
 9a3:	31 d0                	xor    %edx,%eax
 9a5:	89 45 fc             	mov    %eax,-0x4(%ebp)
 9a8:	29 55 fc             	sub    %edx,-0x4(%ebp)
 9ab:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
 9af:	75 07                	jne    9b8 <calculate_shifts+0x6e>
 9b1:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
 9b8:	8b 45 fc             	mov    -0x4(%ebp),%eax
 9bb:	c9                   	leave  
 9bc:	c3                   	ret    

000009bd <__x86.get_pc_thunk.ax>:
 9bd:	8b 04 24             	mov    (%esp),%eax
 9c0:	c3                   	ret    
 9c1:	66 90                	xchg   %ax,%ax
 9c3:	66 90                	xchg   %ax,%ax
 9c5:	66 90                	xchg   %ax,%ax
 9c7:	66 90                	xchg   %ax,%ax
 9c9:	66 90                	xchg   %ax,%ax
 9cb:	66 90                	xchg   %ax,%ax
 9cd:	66 90                	xchg   %ax,%ax
 9cf:	90                   	nop

000009d0 <__libc_csu_init>:
 9d0:	55                   	push   %ebp
 9d1:	57                   	push   %edi
 9d2:	56                   	push   %esi
 9d3:	53                   	push   %ebx
 9d4:	e8 c7 fb ff ff       	call   5a0 <__x86.get_pc_thunk.bx>
 9d9:	81 c3 df 15 00 00    	add    $0x15df,%ebx
 9df:	83 ec 0c             	sub    $0xc,%esp
 9e2:	8b 6c 24 28          	mov    0x28(%esp),%ebp
 9e6:	8d b3 04 ff ff ff    	lea    -0xfc(%ebx),%esi
 9ec:	e8 a7 fa ff ff       	call   498 <_init>
 9f1:	8d 83 00 ff ff ff    	lea    -0x100(%ebx),%eax
 9f7:	29 c6                	sub    %eax,%esi
 9f9:	c1 fe 02             	sar    $0x2,%esi
 9fc:	85 f6                	test   %esi,%esi
 9fe:	74 25                	je     a25 <__libc_csu_init+0x55>
 a00:	31 ff                	xor    %edi,%edi
 a02:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 a08:	83 ec 04             	sub    $0x4,%esp
 a0b:	55                   	push   %ebp
 a0c:	ff 74 24 2c          	pushl  0x2c(%esp)
 a10:	ff 74 24 2c          	pushl  0x2c(%esp)
 a14:	ff 94 bb 00 ff ff ff 	call   *-0x100(%ebx,%edi,4)
 a1b:	83 c7 01             	add    $0x1,%edi
 a1e:	83 c4 10             	add    $0x10,%esp
 a21:	39 fe                	cmp    %edi,%esi
 a23:	75 e3                	jne    a08 <__libc_csu_init+0x38>
 a25:	83 c4 0c             	add    $0xc,%esp
 a28:	5b                   	pop    %ebx
 a29:	5e                   	pop    %esi
 a2a:	5f                   	pop    %edi
 a2b:	5d                   	pop    %ebp
 a2c:	c3                   	ret    
 a2d:	8d 76 00             	lea    0x0(%esi),%esi

00000a30 <__libc_csu_fini>:
 a30:	f3 c3                	repz ret 

Disassembly of section .fini:

00000a34 <_fini>:
 a34:	53                   	push   %ebx
 a35:	83 ec 08             	sub    $0x8,%esp
 a38:	e8 63 fb ff ff       	call   5a0 <__x86.get_pc_thunk.bx>
 a3d:	81 c3 7b 15 00 00    	add    $0x157b,%ebx
 a43:	83 c4 08             	add    $0x8,%esp
 a46:	5b                   	pop    %ebx
 a47:	c3                   	ret    
